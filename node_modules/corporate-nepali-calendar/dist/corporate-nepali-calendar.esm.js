const DAYS_BS_MONTHS = {
    1992: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    1993: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
    1994: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    1995: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
    1996: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    1997: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    1998: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    1999: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    2000: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    2001: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2002: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    2003: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    2004: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    2005: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2006: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    2007: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    2008: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
    2009: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2010: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    2011: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    2012: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
    2013: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2014: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    2015: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    2016: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
    2017: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2018: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    2019: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    2020: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
    2021: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2022: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
    2023: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    2024: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
    2025: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2026: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    2027: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    2028: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2029: [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
    2030: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    2031: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    2032: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2033: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    2034: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    2035: [30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
    2036: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2037: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    2038: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    2039: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
    2040: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2041: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    2042: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    2043: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
    2044: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2045: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    2046: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    2047: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
    2048: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2049: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
    2050: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    2051: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
    2052: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2053: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
    2054: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    2055: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2056: [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
    2057: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    2058: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    2059: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2060: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    2061: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    2062: [30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],
    2063: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2064: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    2065: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    2066: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
    2067: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2068: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    2069: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    2070: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
    2071: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2072: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    2073: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    2074: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
    2075: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2076: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
    2077: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    2078: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
    2079: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2080: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
    2081: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    2082: [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
    2083: [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
    2084: [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
    2085: [31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30],
    2086: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
    2087: [31, 31, 32, 31, 31, 31, 30, 30, 30, 30, 30, 30],
    2088: [30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30],
    2089: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
    2090: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
    2091: [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],
    2092: [30, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30],
    2093: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
    2094: [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
    2095: [31, 31, 32, 31, 31, 31, 30, 29, 30, 30, 30, 30],
    2096: [30, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    2097: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
    2098: [31, 31, 32, 31, 31, 31, 29, 30, 29, 30, 29, 31],
    2099: [31, 31, 32, 31, 31, 31, 30, 29, 29, 30, 30, 30],
    2100: [31, 32, 31, 32, 30, 31, 30, 29, 30, 29, 30, 30],
};
const BS_START_YEAR = 1992;
const BS_START_MONTH = 1;
const BS_START_DATE = 1;
const AD_START_YEAR = 1935;
const AD_START_MONTH = 4;
const AD_START_DATE = 13;

const bsDays = DAYS_BS_MONTHS;
const bsStartYear = BS_START_YEAR;
const bsStartMonth = BS_START_MONTH;
const bsStartDay = BS_START_DATE;
const adStartYear = AD_START_YEAR;
const adStartMonth = AD_START_MONTH;
const adStartDate = AD_START_DATE;
const isLeapYear = (year) => {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
};
const getTimeZone = () => {
    const envTZ = process?.env?.TZ; // Check environment variable
    const intlTZ = Intl?.DateTimeFormat().resolvedOptions().timeZone; // Check Intl API
    // Ensure fallback to 'Asia/Kathmandu'
    return envTZ || intlTZ || "Asia/Kathmandu";
};
const daysInAdMonth = (year, month) => {
    const daysInEachMonth = [
        31,
        isLeapYear(year) ? 29 : 28,
        31,
        30,
        31,
        30,
        31,
        31,
        30,
        31,
        30,
        31,
    ];
    const days = daysInEachMonth[month - 1];
    if (days === undefined) {
        throw new Error("Unexpected error: Month index out of bounds.");
    }
    return days;
};
const calculateTotalDaysFromBs = (bsYear, bsMonth, bsDay) => {
    if (bsDays[bsYear] === undefined) {
        throw new Error("Please enter BS year from 1992 to 2100.");
    }
    let totalDays = 0;
    for (let year = bsStartYear; year < bsYear; year++) {
        const daysInYear = bsDays[year];
        // If daysInYear is undefined, terminate the loop
        if (!daysInYear) {
            console.warn(`Terminating loop due to missing data for BS year ${year}.`);
            break;
        }
        totalDays += daysInYear.reduce((sum, days) => sum + days, 0);
    }
    for (let month = 0; month < bsMonth - 1; month++) {
        totalDays += bsDays[bsYear][month] || 0;
    }
    // Add the days of the current month
    totalDays += bsDay - 1;
    return totalDays;
};
const calculateTotalDaysFromAd = (adYear, adMonth, adDay) => {
    let totalDays = -90;
    for (let year = adStartYear; year < adYear; year++) {
        totalDays += isLeapYear(year) ? 366 : 365;
    }
    for (let month = 1; month < adMonth; month++) {
        totalDays += daysInAdMonth(adYear, month);
    }
    totalDays += adDay - adStartDate;
    return totalDays;
};
const adToBsDateConversion = (adYear, adMonth, adDay) => {
    const totalAdDays = calculateTotalDaysFromAd(adYear, adMonth, adDay);
    let totalDays = totalAdDays;
    let bsYear = bsStartYear;
    let bsMonth = bsStartMonth;
    let bsDay = bsStartDay;
    if (adStartYear >= adYear) {
        if (adStartMonth > adMonth ||
            (adStartMonth === adMonth && adStartDate > adDay)) {
            throw new Error("AD year goes beyond the available range.");
        }
    }
    if (bsDays[bsYear] === undefined) {
        throw new Error("BS year exceeds the available range (1992-2100).");
    }
    // Adjust BS date based on total days
    while (totalDays >= (bsDays[bsYear]?.[bsMonth - 1] ?? 0)) {
        totalDays -= bsDays[bsYear]?.[bsMonth - 1] ?? 0;
        bsMonth++;
        if (bsMonth > 12) {
            bsMonth = 1;
            bsYear++;
            if (bsDays[bsYear] === undefined) {
                throw new Error("BS year exceeds the available range (1992-2100).");
            }
        }
    }
    bsDay += totalDays;
    // Handle overflow for days
    if (bsDay > (bsDays[bsYear]?.[bsMonth - 1] ?? 0)) {
        bsDay -= bsDays[bsYear]?.[bsMonth - 1] ?? 0;
        bsMonth++;
        if (bsMonth > 12) {
            bsMonth = 1;
            bsYear++;
            if (bsDays[bsYear] === undefined) {
                throw new Error("BS year exceeds the available range (1992-2100).");
            }
        }
    }
    return { bsYear, bsMonth, bsDay };
};
const bsToAdDateConversion = (bsYear, bsMonth, bsDay) => {
    // Check if the BS year is within the valid range
    if (bsYear < 1992 || bsYear > 2100) {
        throw new Error("BS year exceeds the available range (1992-2100).");
    }
    const totalBsDays = calculateTotalDaysFromBs(bsYear, bsMonth, bsDay);
    let totalDays = totalBsDays;
    let adYear = adStartYear;
    let adMonth = adStartMonth;
    let adDay = adStartDate;
    // Adjust AD date based on total days
    while (totalDays > 0) {
        const daysInMonthV = daysInAdMonth(adYear, adMonth);
        if (totalDays < daysInMonthV) {
            adDay += totalDays;
            if (adDay > daysInMonthV) {
                adMonth += 1;
                adDay -= daysInMonthV;
            }
            if (adMonth > 12) {
                adMonth = 1;
                adYear++;
            }
            totalDays = 0;
        }
        else {
            totalDays -= daysInMonthV;
            adMonth++;
            if (adMonth > 12) {
                adMonth = 1;
                adYear++;
            }
        }
    }
    return { adYear, adMonth, adDay };
};
const formatDate = ({ year, month, day, format = "YYYY-MM-DD", }) => {
    const paddedMonth = month.toString().padStart(2, "0");
    const paddedDay = day.toString().padStart(2, "0");
    return format
        .replace("YYYY", year.toString())
        .replace("MM", paddedMonth)
        .replace("DD", paddedDay);
};
const dateDifference = (date1, date2, unit = "days") => {
    const differenceInMs = Math.abs(date1.getTime() - date2.getTime());
    const totalDays = Math.floor(differenceInMs / (1000 * 60 * 60 * 24));
    switch (unit) {
        case "days":
            return { days: totalDays };
        case "weeks": {
            const weeks = Math.floor(totalDays / 7);
            const remainingDays = totalDays % 7;
            return { weeks, days: remainingDays };
        }
        case "months": {
            const months = Math.floor(totalDays / 30.44); // Approximate month length
            const remainingDays = Math.floor(totalDays % 30.44);
            return { months, days: remainingDays };
        }
        default:
            throw new Error("Invalid unit");
    }
};
const validateYear = (year) => {
    if (year < 1992 || year > 2100) {
        throw new Error("Invalid year: Please provide a year between 1992 and 2100.");
    }
};
const validateMonth = (month) => {
    if (month < 1 || month > 12) {
        throw new Error("Invalid month: Please provide a month between 1 and 12.");
    }
};
const getDaysArray = (year, accountingYearType) => {
    let daysInEachMonth;
    if (accountingYearType === "calendar") {
        daysInEachMonth = DAYS_BS_MONTHS[year] || [];
    }
    else if (accountingYearType === "financial") {
        daysInEachMonth = [
            ...(DAYS_BS_MONTHS[year]?.slice(3) || []),
            ...(DAYS_BS_MONTHS[year + 1]?.slice(0, 3) || []),
        ];
    }
    else {
        throw new Error(`Invalid accountingYearType: ${accountingYearType}`);
    }
    return daysInEachMonth;
};
const getPeriod = ({ dateString, periodType = "quarter", yearType = "calendar", }) => {
    // Parse the date string into year, month, and day
    const [year, month] = dateString.split("-").map(Number);
    if (yearType === "financial") {
        // Adjust for financial year starting in April
        const adjustedYear = month < 4 ? year - 1 : year;
        const adjustedMonth = ((month + 9) % 12) + 1; // Adjust month for financial year
        if (periodType === "quarter") {
            const quarter = Math.ceil(adjustedMonth / 3);
            return { year: adjustedYear, quarter };
        }
        if (periodType === "half-year") {
            const halfYear = Math.ceil(adjustedMonth / 6);
            return { year: adjustedYear, halfYear };
        }
    }
    // Default to calendar year
    if (periodType === "quarter") {
        const quarter = Math.ceil(month / 3);
        return { year, quarter };
    }
    if (periodType === "half-year") {
        const halfYear = Math.ceil(month / 6);
        return { year, halfYear };
    }
    throw new Error('Invalid periodType. Use "quarter" or "half-year".');
};
const nextPeriod = ({ dateString, periodType = "quarter", yearType = "calendar", }) => {
    // Parse the date string into year and month
    const [year, month] = dateString.split("-").map(Number);
    if (yearType === "financial") {
        if (periodType === "quarter") {
            let adjustedYear = month < 4 ? year - 1 : year;
            //2078-03-31 Financial year end -> 2078-09-30
            const adjustedMonth = month < 4 ? month + 9 : month - 3; // Adjust month for financial year
            const nextQuarter = Math.ceil((adjustedMonth + 3) / 3);
            if (nextQuarter > 4)
                adjustedYear++; // Move to next year if it exceeds Q4
            return { year: adjustedYear, quarter: ((nextQuarter - 1) % 4) + 1 };
        }
        if (periodType === "half-year") {
            return { year: year, halfYear: month === 3 ? 1 : 2 };
        }
    }
    // Default to calendar year
    if (periodType === "quarter") {
        const nextQuarter = Math.ceil((month + 3) / 3);
        const nextYear = nextQuarter > 4 ? year + 1 : year;
        return { year: nextYear, quarter: ((nextQuarter - 1) % 4) + 1 };
    }
    if (periodType === "half-year") {
        const nextHalfYear = Math.ceil((month + 6) / 6);
        const nextYear = nextHalfYear > 2 ? year + 1 : year;
        return { year: nextYear, halfYear: ((nextHalfYear - 1) % 2) + 1 };
    }
    throw new Error('Invalid periodType. Use "quarter" or "half-year".');
};

// Default configuration
const globalConfig = {
    accountingYearType: "calendar",
    calendarSystem: "bs",
};
const getDaysAdMonth = (year, month) => {
    if (month < 1 || month > 12) {
        throw new Error("Invalid month: Please provide a month between 1 and 12.");
    }
    const days = daysInAdMonth(year, month);
    if (days === undefined) {
        throw new Error("Unexpected error: Month index out of bounds.");
    }
    return days;
};
const getDaysBsMonth = (year, month, accountingYearType) => {
    validateYear(year);
    validateMonth(month);
    const accountingYear = accountingYearType || globalConfig.accountingYearType;
    const daysInEachMonth = getDaysArray(year, accountingYear);
    const days = daysInEachMonth[month - 1] || 30;
    return days;
};
const getDaysBsQuarter = (year, quarter, accountingYearType) => {
    validateYear(year);
    const accountingYear = accountingYearType || globalConfig.accountingYearType;
    if (quarter < 1 || quarter > 4) {
        throw new Error("Invalid quarter: Please provide a quarter between 1 and 4.");
    }
    const daysInEachMonth = getDaysArray(year, accountingYear);
    // Calculate the starting index for the quarter
    const startIndex = (quarter - 1) * 3;
    // Sum the days for the three months in the given quarter
    const quarterDays = daysInEachMonth
        .slice(startIndex, startIndex + 3)
        .reduce((total, days) => total + days, 0);
    return quarterDays;
};
const getDaysBsHalfYear = (year, half, accountingYearType) => {
    validateYear(year);
    const accountingYear = accountingYearType || globalConfig.accountingYearType;
    if (half !== 1 && half !== 2) {
        throw new Error("Invalid half: Please provide a half of either 1 or 2.");
    }
    const daysInEachMonth = getDaysArray(year, accountingYear);
    // Calculate the starting index for the half-year
    const startIndex = (half - 1) * 6;
    const halfYearDays = daysInEachMonth
        .slice(startIndex, startIndex + 6)
        .reduce((total, days) => total + days, 0);
    return halfYearDays;
};
const getDaysBsYear = (year, accountingYearType) => {
    validateYear(year);
    const accountingYear = accountingYearType || globalConfig.accountingYearType;
    const daysInEachMonth = getDaysArray(year, accountingYear);
    const yearDays = daysInEachMonth.reduce((total, days) => total + days, 0);
    return yearDays;
};
const getBsMonthEndDate = (year, month, accountingYearType) => {
    validateYear(year);
    validateMonth(month);
    const accountingYear = accountingYearType || globalConfig.accountingYearType;
    const daysInEachMonth = getDaysArray(year, accountingYear);
    const days = daysInEachMonth[month - 1] || 30;
    const endDate = formatDate({ year: year, month: month, day: days });
    return endDate;
};
const getBsQuarterEndDate = (year, quarter, accountingYearType) => {
    validateYear(year);
    const accountingYear = accountingYearType || globalConfig.accountingYearType;
    const daysInEachMonth = getDaysArray(year, accountingYear);
    if (quarter < 1 || quarter > 4) {
        throw new Error("Invalid quarter: Please provide a quarter between 1 and 4.");
    }
    const days = daysInEachMonth[quarter * 3 - 1] || 30;
    let adjustedYear = year;
    let adjustedMonth = quarter * 3;
    if (accountingYear === "financial") {
        adjustedYear = quarter === 4 ? year + 1 : year;
        adjustedMonth = ((quarter % 4) + 1) * 3;
    }
    const endDate = formatDate({
        year: adjustedYear,
        month: adjustedMonth,
        day: days,
    });
    return endDate;
};
const getBsHalfYearEndDate = (year, half, accountingYearType) => {
    validateYear(year);
    const accountingYear = accountingYearType || globalConfig.accountingYearType;
    const daysInEachMonth = getDaysArray(year, accountingYear);
    if (half !== 1 && half !== 2) {
        throw new Error("Invalid half: Please provide a half of either 1 or 2.");
    }
    const days = daysInEachMonth[half * 6 - 1] || 30;
    let adjustedYear = year;
    let adjustedMonth = half * 6;
    if (accountingYear === "financial") {
        adjustedMonth = adjustedMonth + 3;
        adjustedYear = adjustedMonth > 12 ? year + 1 : year;
        adjustedMonth = adjustedMonth % 12;
    }
    const endDate = formatDate({
        year: adjustedYear,
        month: adjustedMonth,
        day: days,
    });
    return endDate;
};
const getBsYearEndDate = (year, accountingYearType) => {
    validateYear(year);
    const accountingYear = accountingYearType || globalConfig.accountingYearType;
    const daysInEachMonth = getDaysArray(year, accountingYear);
    const days = daysInEachMonth[11] || 30;
    const endDate = formatDate({ year: year, month: 12, day: days });
    return endDate;
};
const convertToBs = (date) => {
    // Ensure the input is a valid date and convert to 'YYYY-MM-DD' format
    const dateString = (date instanceof Date ? date.toISOString() : date).split("T")[0];
    if (!dateString) {
        throw new Error("Invalid date: Please provide a valid date.");
    }
    // Split the date part into year, month, and day
    const [adYear, adMonth, adDay] = dateString.split("-").map(Number);
    // Validate if the year, month, and day are valid numbers
    if (!adYear || !adMonth || !adDay) {
        throw new Error("Invalid date: Please provide a valid date.");
    }
    // Call the adToBsDateConversion function to get the BS date
    const { bsYear, bsMonth, bsDay } = adToBsDateConversion(adYear, adMonth, adDay);
    // Return the formatted BS date using the formatDate function
    return formatDate({ year: bsYear, month: bsMonth, day: bsDay });
};
const convertToAd = (date) => {
    // Ensure the input is a valid date and convert to 'YYYY-MM-DD' format
    const dateString = (date instanceof Date ? date.toISOString() : date)?.split("T")[0];
    // Check if dateString is valid
    if (!dateString) {
        throw new Error("Invalid date: Please provide a valid date.");
    }
    const [bsYear, bsMonth, bsDay] = dateString.split("-").map(Number);
    if (!bsYear || !bsMonth || !bsDay) {
        throw new Error("Invalid date: Please provide a valid date.");
    }
    const { adYear, adMonth, adDay } = bsToAdDateConversion(bsYear, bsMonth, bsDay);
    return formatDate({ year: adYear, month: adMonth, day: adDay });
};
const getDaysDifferenceBsDates = ({ startDate, endDate, includeEndDate = false, }) => {
    const start = new Date(convertToAd(startDate));
    const end = new Date(convertToAd(endDate));
    const daysDifference = dateDifference(start, end);
    let days = daysDifference.days;
    if (includeEndDate) {
        days += 1;
    }
    return days;
};
const getAdMonthRangeFromBsMonth = (year, month) => {
    if (month < 1 || month > 12) {
        throw new Error("Invalid month: Please provide a month between 1 and 12.");
    }
    const endDateBs = getBsMonthEndDate(year, month);
    const endDateAd = convertToAd(endDateBs);
    return {
        monthStartDate: convertToAd(formatDate({ year: year, month: month, day: 1 })),
        monthEndDate: endDateAd,
    };
};
const getTodaysBsDate = () => {
    const timeZone = getTimeZone();
    const formatter = new Intl.DateTimeFormat("en-GB", {
        timeZone,
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
    });
    const parts = formatter.formatToParts(new Date());
    const year = parts.find((part) => part.type === "year")?.value;
    const month = parts.find((part) => part.type === "month")?.value;
    const day = parts.find((part) => part.type === "day")?.value;
    const formattedDate = `${year}-${month}-${day}`;
    const todayBs = convertToBs(formattedDate);
    return todayBs;
};
const getPeriodEndDatesBs = ({ startDate, endDate, periodType, yearType = "calendar", }) => {
    const periodEndFunction = periodType === "quarter" ? getBsQuarterEndDate : getBsHalfYearEndDate;
    // Initialize the array of end dates
    const endDates = [startDate];
    let currentPeriod = getPeriod({
        dateString: startDate,
        periodType,
        yearType,
    });
    // Loop through periods, adding their end dates to the array
    while (true) {
        const periodEndDate = periodEndFunction(currentPeriod.year, currentPeriod.quarter ?? currentPeriod.halfYear, yearType);
        // Check if the next period has crossed the endDate
        if (periodEndDate > endDate) {
            // Add the endDate itself if it's not included yet
            if (!endDates.includes(endDate)) {
                endDates.push(endDate);
            }
            break;
        }
        endDates.push(periodEndDate);
        const nextPeriodData = nextPeriod({
            dateString: periodEndDate,
            periodType,
            yearType,
        });
        const nextPeriodEndDate = periodEndFunction(nextPeriodData.year, nextPeriodData.quarter ?? nextPeriodData.halfYear, yearType);
        // If the next period end date crosses the end date, stop iteration
        if (nextPeriodEndDate > endDate) {
            endDates.push(endDate);
            break;
        }
        currentPeriod = nextPeriodData;
    }
    return endDates;
};
const getPeriodEndDatesAd = ({ startDate, endDate, periodType, yearType = "calendar", }) => {
    const bsDatesArray = getPeriodEndDatesBs({
        startDate,
        endDate,
        periodType,
        yearType,
    });
    const adDates = bsDatesArray.map((date) => convertToAd(date));
    return adDates;
};

export { convertToAd, convertToBs, getAdMonthRangeFromBsMonth, getBsMonthEndDate, getBsQuarterEndDate, getBsYearEndDate, getDaysAdMonth, getDaysBsHalfYear, getDaysBsMonth, getDaysBsQuarter, getDaysBsYear, getDaysDifferenceBsDates, getPeriodEndDatesAd, getPeriodEndDatesBs, getTodaysBsDate };
//# sourceMappingURL=corporate-nepali-calendar.esm.js.map
